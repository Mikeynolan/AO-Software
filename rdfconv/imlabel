#!/usr/bin/perl -w
#
use Getopt::Std qw(getopts);
use File::Spec;
use Astro::FITS::Header;
use Astro::FITS::Header::CFITSIO qw( :longnames );
use DateTime::Format::Strptime;
use DateTime;
use POSIX;
#use strict;
#use warnings;

# For the cheezy csv parser
my $file;
my $lcfile;
our ($opt_B,$opt_t,$opt_f, $opt_h, $opt_L, $opt_O, $opt_S, $opt_E, $opt_T, $opt_V);
our $tfh;
my $obssysfile;
my $editor;
my $orcid;
my $ttype;
my $version;
my $bookmark;
my $header;
my $txfreq;
my $date;
my $dateP = DateTime::Format::Strptime->new(
  pattern   => '%FT%T',
  locale    => 'en_US',
  time_zone => 'UTC',
);


getopts('B:t:L:hS:E:O:V:');

if ($opt_h) {
  print STDERR <<EOT;
Usage: imlabel -L bundlelid -E editor -O orcid [-t template] [-S obssysfile] [-T targettype] [-h] file.fits [file.fits ...]
    -L:  LID for bundle, to be prepended onto the LIDs (required)
    -t:  Use template as a template for the xml. Default is internal template
    -S:  File to contain Observing System xml
    -E:  Editor (required: Use full name with spaces)
    -O:  Editor ORCID (required)
    -T:  Targettype (default Asteroid)
    -B:  Observing system Bookmark (default AO TX;AO RX;AO RI)
    -V:  Version (default 1.0)
    -f:  Frequency (default 2380000000)
    -h:  Print this message.
EOT
  exit;
}
if ($opt_t) {
  open($tfh, "<", $opt_t) || die;
} else {
  open($tfh, "<", gettemplate()) || die;
}
my $bundlelid;
if($opt_L) {
  $bundlelid = $opt_L;
} else {
  die "Must provide bundle lid";
}
if($opt_E) {
  $editor = $opt_E;
} else {
  die "Must provide editor";
}
if ($opt_O) {
  $orcid = $opt_O;
} else {
  die "must provide orcid";
}
if ($opt_T) {
  $ttype = $opt_T;
} else {
  $ttype = "Asteroid";
}
if($opt_B) {
  $bookmark = $opt_B;
} else {
  $bookmark="AO TX;AO RX;AO RI";
}
if ($opt_V) {
  $version = $opt_V;
} else {
  $version = "1.0";
}
if ($opt_f) {
  $txfreq = $opt_f;
} else {
  $txfreq = 2380000000.0;
}

#my $invest;
#if($opt_I) {
#$invest = $opt_I;
#} else {
#die "Must provide Investigation name";
#}
if($opt_S) {
  $obssysfile = $opt_S;
} else {
  $obssysfile = "obssys";
}
# This script is Imaging.
my $moreRadar = '          <radar:observation_purpose>Range-Doppler</radar:observation_purpose>
';
foreach $file (@ARGV) {
  my %replace;
  my ($col,$dirpath,$filename) = File::Spec->splitpath($file);
  my ($cdate,$start,$lcstart,$stopt,$pname,$tname,$obssysstring);
  my ($xmlname);
  my $writepdsversion;
  my $txprops = '';
  my $sampprops .= "            <radar:sample_type>Complex</radar:sample_type>\n";
  my $targetprops = '';
  my $imageprops = '';
# Modulation under discussion in radar dictionary as of 02/2022. Still
# not there 5/2025 skipping
# my $txprops = '            <radar:Modulation>
#              <radar:power_modulation>CW</radar:power_modulation>
#              <radar:waveform_modulation>Uncoded</radar:waveform_modulation>
#            </radar:Modulation>
#';
  my $header = new Astro::FITS::Header::CFITSIO( File => $file, ReadOnly => 1 );
  my $numcards = $header -> sizeof;
# There are always a multiple of 36 cards.
  my $offset = ceil(($numcards+1)/36) * 2880;
  $replace{'XXXHEADERLENXXX'} = $offset;
# DATE-OBS isn't forced to be in the correct format, but it is for all of our data.
  $start = $header->value("DATE-OBS");
  $replace{'XXXSTART'} = "${start}Z";
  $date= $dateP->parse_datetime($start);
  $exposure = $header->value("EXPOSURE");
  $date -> add (seconds => $exposure);
  $stopt = $dateP->format_datetime($date);
  $replace{'XXXSTOP'} = "${stopt}Z";
  $tname = $header->value("OBJECT");
  if ($tname =~ /(\d{4})([A-Za-z]{2}.*)/) {
    $tname = uc "$1 $2";
  }
  $replace{'XXXTARGET'} = $tname;
  $pname = "Radar delay-Doppler image of $tname";
  $editor =~ /(.*)\s(\S+)$/;
  $replace{'XXXFIRSTNAMEXXX'} = $1;
  $replace{'XXXLASTNAMEXXX'} = $2;
  $replace{'XXXORCIDXXX'} = $orcid;
  $replace{'XXXTTYPE'} = $ttype;
  $cdate = $header->value('DATE');
  $replace{'XXXCDATE'} = $cdate;
  $replace{'XXXYEAR'} = substr($cdate, 0, 4);
  $replace{'XXXVERSION'} = $version;
  # my $txpower = '1';
  #my $txpowernil= "";
  # Once it becomes nillable, will change to this:
  my $txpower = '';
  my $txpowernil= " xsi:nil=\"true\" nilReason=\"missing\"";
  my $baudlen = $header -> value("BAUDLEN");
  my $pri =  $header -> value("CODELEN");
  $pri *= $baudlen;
  $txprops .= "            <radar:range_resolution_time unit=\"ns\">@{[ $baudlen * 1000 ]}</radar:range_resolution_time>\n";
  $txprops .= "            <radar:transmitter_frequency unit=\"Hz\">$txfreq</radar:transmitter_frequency>\n";
  $txprops .= "            <radar:transmitter_power unit=\"W\"$txpowernil>$txpower</radar:transmitter_power>\n";
  #  $txprops .= "            <radar:pulse_repetition_interval unit=\"ns\">@{[ $pri * 1000 ]}</radar:pulse_repetition_interval>\n";
  $txprops .= "            <radar:pulse_repetition_frequency unit=\"Hz\">@{[ 1.e6 / $pri ]}</radar:pulse_repetition_frequency>\n";
  $txprops .= "            <!-- radar:pulse_repetition_frequency is a reciprocal, not exact -->\n";
  my $spb = $header -> value("SAMPPBD");
  my $delt1 = $header -> value("CDELT1");
  my $delt2 = $header -> value("CDELT2");
  my $sinterval = floor($baudlen * 1000 / $spb +0.5);
# should be safe to assume even number of ns.
  $sampprops .= "            <radar:sample_interval unit=\"ns\">$sinterval</radar:sample_interval>\n";
  $imageprops .= "            <radar:range_pixel_scale_time unit=\"ns\">@{[ $delt2 * 1000 ]}</radar:range_pixel_scale_time>\n";
  $imageprops .= "            <radar:doppler_pixel_scale unit=\"Hz\">$delt1</radar:doppler_pixel_scale>\n";
  $replace{'XXXFITSFILE'} = $filename;
  $replace{'XXXPTITLE'} = "$pname $start";
  $lcfile = lc $file;
# Remove extension
  $lcfile =~ s/.fit[s]?//i;
  $lcstart = lc $start;
  ($replace{'XXXIDENT'} = "${lcfile} ${lcstart}") =~ s/[. :]/_/g;
  $obssysstring = obssys($bookmark);
# Need to fix up here as we will write separately
  $obssysstring =~ s/XXXBUNDLELID/$bundlelid/g;
  $replace{'XXXOBSSYSTEM'} = $obssysstring;
  $replace{'XXXTXPROPS'} = $txprops;
  $replace{'XXXSAMPPROPS'} = $sampprops;
  $replace{'XXXIMAGEPROPS'} = $imageprops;
  $replace{'XXXTRGETPROPS'} = $targetprops;
  $replace{'XXXMORERADAR'} = $moreRadar;
  $replace{'XXXBUNDLELID'} = $bundlelid;
  $replace{'XXXNFREQXXX'} = $header->value('NAXIS1');
  $replace{'XXXNBINSXXX'}  = $header->value('NAXIS2');
 
# And do the replace on the template.
  my $regex = join "|", map { quotemeta } keys %replace;
  $regex = qr/$regex/;

  seek($tfh, 0, 0) || die; #rewind template
  ($xmlname = $file) =~ s/\.fit[s]?$/.xml/i;
  open (my $xfh, "> $xmlname") || die;
  while (<$tfh>) {
    s/($regex)/$replace{$1}/g;
    print $xfh $_;
  }
  close $xfh;
  open ($xfh, "> $obssysfile") || die;
  print $xfh $obssysstring;
  close $xfh;

} # While @ARGV

sub obssys {
# We need to parse the bookmarks and create a string with the various pieces
# This is probably easiest to do pretty brute force.

my $book = $_[0];
# Was a telescope used (telescope and facility.
# observatories
my $ao = 0;
my $gold = 0;
my $gbt = 0;
# facilities
my $ao305 = 0;
my $dss14 = 0;
my $dss13 = 0;
my $gbtt = 0;
# instruments
my $aotx = 0;
my $aorx = 0;
my $dss14tx = 0;
my $dss14rx = 0;
my $dss13tx = 0;
my $dss13rx = 0;
my $gbtrx = 0;
# which did we use for what
my $tx = 0;
my $rx = 0;
# backends
my $aori = 0;
my $pfs = 0;

my %sta= (
  -9 => 'GBT',
  -14 => 'DSS-14',
  -13 => 'DSS-13',
  -1 => 'Arecibo'
);

if ($book =~ /AO TX/) {
 $ao = 1;
 $ao305 = 1;
 $tx = -1;
 $aotx = 1;
}
if ($book =~ /AO RX/) {
 $ao = 1;
 $ao305 = 1;
 $aorx = 1;
 $rx = -1;
}
if ($book =~ /AO RI/) {
 $ao = 1;
 $aori = 1;
}
if ($book =~ /DSS14 TX/) {
 $gold = 1;
 $dss14 = 1;
 $dss14tx = 1;
 $tx = -14;
}
if ($book =~ /DSS14 RX/) {
 $gold = 1;
 $dss14 = 1;
 $dss14rx = 1;
 $rx = -14;
}
if ($book =~ /PFS/) {
 $pfs = 1;
}
if ($book =~ /GBT/) {
 $gbt = 1;
 $gbtt = 1;
 $gbtrx = 1;
 $rx = -9
}
my $sysname;
if ($tx == $rx) {
 $sysname="Monostatic " . $sta{$tx} . " Radar";
} else {
 $sysname="Bitstatic " . $sta{$tx} . "-" . $sta{$rx} . " Radar";
}
my $obssys = <<EOT;
    <Observing_System>
      <name>$sysname</name>
EOT
if ($ao) {
 $obssys .= <<EOT;
      <Observing_System_Component>
        <name>Arecibo Observatory</name>
        <type>Host</type>
        <Internal_Reference>
           <lid_reference>urn:nasa:pds:context:facility:observatory.arecibo</lid_reference>
          <reference_type>is_facility</reference_type>
        </Internal_Reference>
      </Observing_System_Component>
EOT
}
if ($ao305) {
 $obssys .= <<EOT;
      <Observing_System_Component>
        <name>305-m fixed spherical reflecting antenna</name>
        <type>Telescope</type>
        <Internal_Reference>
          <lid_reference>urn:nasa:pds:context:telescope:arecibo.305m</lid_reference>
          <reference_type>is_telescope</reference_type>
        </Internal_Reference>
      </Observing_System_Component>
EOT
}
if ($aotx) {
 $obssys .= <<EOT;
      <Observing_System_Component>
        <name>Arecibo Planetary Radar Transmitter</name>
        <type>Instrument</type>
        <Internal_Reference>
          <lid_reference>urn:nasa:pds:context:instrument:arecibo.305m.trans_s</lid_reference>
          <reference_type>is_instrument</reference_type>
        </Internal_Reference>
      </Observing_System_Component>
EOT
}
if ($aorx) {
 $obssys .= <<EOT;
      <Observing_System_Component>
        <name>Arecibo 2380 MHz Radar Receiver</name>
        <type>Instrument</type>
        <Internal_Reference>
          <lid_reference>urn:nasa:pds:context:instrument:arecibo.305m.recv_s</lid_reference>
          <reference_type>is_instrument</reference_type>
        </Internal_Reference>
      </Observing_System_Component>
EOT
}
if ($gold) {
 $obssys .= <<EOT;
      <Observing_System_Component>
        <name>Goldstone Complex</name>
        <type>Host</type>
        <Internal_Reference>
          <lid_reference>urn:nasa:pds:context:instrument:arecibo.305m.recv_s</lid_reference>
          <reference_type>is_facility</reference_type>
        </Internal_Reference>
      </Observing_System_Component>
EOT
}
if ($dss14) {
 $obssys .= <<EOT;
      <Observing_System_Component>
        <name>70-m steerable parabolic radio telescope</name>
        <type>Telescope</type>
        <Internal_Reference>
          <lid_reference>urn:nasa:pds:context:telescope:goldstone.dss14_70m</lid_reference>
          <reference_type>is_telescope</reference_type>
        </Internal_Reference>
      </Observing_System_Component>
EOT
}
if ($dss14tx) {
 $obssys .= <<EOT;
      <Observing_System_Component>
        <name>Goldstone Solar System Radar Receiver</name>
        <type>Instrument</type>
        <Internal_Reference>
          <lid_reference>urn:nasa:pds:context:instrument:goldstone.dss14_70m.recv_x</lid_reference>
          <reference_type>is_instrument</reference_type>
        </Internal_Reference>
      </Observing_System_Component>
EOT
}
if ($dss14rx) {
 $obssys .= <<EOT;
      <Observing_System_Component>
        <name>Goldstone Solar System Radar Transmitter</name>
        <type>Instrument</type>
        <Internal_Reference>
           <lid_reference>urn:nasa:pds:context:instrument:goldstone.dss14_70m.trans_x</lid_reference>
          <reference_type>is_instrument</reference_type>
        </Internal_Reference>
      </Observing_System_Component>
EOT
}
if ($pfs) {
 $obssys .= <<EOT;
      <Observing_System_Component>
        <name>Radar Portable Fast Sampler</name>
        <type>Instrument</type>
      </Observing_System_Component>
EOT
}
if ($aori) {
 $obssys .= <<EOT;
      <Observing_System_Component>
        <name>Arecibo Observatory Radar Interface</name>
        <type>Instrument</type>
      </Observing_System_Component>
EOT
}
# Close out
$obssys .= "    </Observing_System>";
return $obssys;
}

sub gettemplate {
#
# THere are issues both with having this here and with a separate file.
#
our $template3 = <<EOT;
<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://pds.nasa.gov/pds4/pds/v1/PDS4_PDS_1O00.sch" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<?xml-model href="https://pds.nasa.gov/pds4/radar/v1/PDS4_RADAR_1O00_1310.sch" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<Product_Observational
 xmlns="http://pds.nasa.gov/pds4/pds/v1"
 xmlns:radar="http://pds.nasa.gov/pds4/radar/v1"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://pds.nasa.gov/pds4/pds/v1 http://pds.nasa.gov/pds4/pds/v1/PDS4_PDS_1O00.xsd
                     http://pds.nasa.gov/pds4/radar/v1 https://pds.nasa.gov/pds4/radar/v1/PDS4_RADAR_1O00_1310.xsd">
  <Identification_Area>
    <logical_identifier>XXXBUNDLELID:data:XXXIDENT</logical_identifier>
    <version_id>XXXVERSION</version_id>
    <title>XXXPTITLE</title>
    <information_model_version>1.24.0.0</information_model_version>
    <product_class>Product_Observational</product_class>
    <Citation_Information>
      <publication_year>XXXYEAR</publication_year>
      <description>Radar Range-Doppler image as a FITS file</description>
      <List_Editor>
        <Person>
	  <given_name>XXXFIRSTNAMEXXX</given_name>
	  <family_name>XXXLASTNAMEXXX</family_name>
	  <person_orcid>XXXORCIDXXX</person_orcid>
	</Person>
      </List_Editor>
    </Citation_Information>
  </Identification_Area>
  <Observation_Area>
    <Time_Coordinates>
      <start_date_time>XXXSTART</start_date_time>
      <stop_date_time>XXXSTOP</stop_date_time>
    </Time_Coordinates>
    <Primary_Result_Summary>
      <purpose>Science</purpose>
      <processing_level>Partially Processed</processing_level>
      <Science_Facets>
        <discipline_name>Small Bodies</discipline_name>
        <facet1>Physical Properties</facet1>
      </Science_Facets>
    </Primary_Result_Summary>
    <Investigation_Area>
      <name>Arecibo Radar Imaging and Doppler Spectroscopy</name>
      <type>Individual Investigation</type>
      <Internal_Reference>
        <lid_reference>urn:nasa:pds:context:investigation:individual.arecibo_radar_imaging_and_doppler_spectroscopy</lid_reference>
        <reference_type>data_to_investigation</reference_type>
      </Internal_Reference>
    </Investigation_Area>
XXXOBSSYSTEM
    <Target_Identification>
      <name>XXXTARGET</name>
      <type>XXXTTYPE</type>
    </Target_Identification>
    <Discipline_Area>
      <radar:Radar>
        <radar:Groundbased_Radar>
XXXMORERADAR          <radar:Transmission_Properties>
XXXTXPROPS          </radar:Transmission_Properties>
          <radar:Sampling_Properties>
XXXSAMPPROPS          </radar:Sampling_Properties>
          <radar:Radar_Image_Properties>
            <radar:Pixel_Scale>
XXXIMAGEPROPS            </radar:Pixel_Scale>
          </radar:Radar_Image_Properties>
        </radar:Groundbased_Radar>
      </radar:Radar>
    </Discipline_Area>
  </Observation_Area>
  <File_Area_Observational>
    <File>
      <file_name>XXXFITSFILE</file_name>
      <creation_date_time>XXXCDATE</creation_date_time>
    </File>
    <Header>
      <offset unit="byte">0</offset>
      <object_length unit="byte">XXXHEADERLENXXX</object_length>
      <parsing_standard_id>FITS 3.0</parsing_standard_id>
      <description>FITS attached header</description>
    </Header>
    <Array_2D>
      <local_identifier>primary_image</local_identifier>
      <offset unit="byte">XXXHEADERLENXXX</offset>
      <axes>2</axes>
      <axis_index_order>Last Index Fastest</axis_index_order>
      <description>Delay-Doppler image array</description>
      <Element_Array>
        <data_type>IEEE754MSBSingle</data_type>
      </Element_Array>
      <Axis_Array>
        <axis_name>Doppler</axis_name>
        <elements>XXXNFREQXXX</elements>
        <sequence_number>1</sequence_number>
      </Axis_Array>
      <Axis_Array>
        <axis_name>Range</axis_name>
        <elements>XXXNBINSXXX</elements>
        <sequence_number>2</sequence_number>
      </Axis_Array>
    </Array_2D>
  </File_Area_Observational>
</Product_Observational>
EOT

return \$template3;
}

