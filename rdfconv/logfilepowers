#!/usr/bin/perl -w
use Time::Local;
require File::Temp;
# use Time::gmtime;
use POSIX;
use Getopt::Std;

our ($opt_x,$opt_H,$opt_v);

#
##
##Note: This script was hacked from logfilerdf. It has a *lot* of dead code.
#
#
my $usage='Usage: logfilepower [-t kw] [-z tzcorr] logfile
It doesnt do any of this stuff anymore, just outputs times and powers:
 -t power uses power instead of getting from the meter, for when the meter wasnt working.
';
my %months = (Jan=>0, Feb=>1, Mar=>2, Apr=>3, May=>4, Jun=>5, Jul=>6, Aug=>7, Sep=>8, Oct=>9, Nov=>10, Dec=>11);
my $SPD=86400;

my $baud=1;
my $delayfrac = 0;
my $caltm=0;
my $code=1;
my $ephemeris="";
my $optlong = "";
my $txoffhz=0;
my $ephdelay=0;
my $numpol=2;
my $tzcorr;
my $gw=1.;
my $fracBd = 0.;
my $rxsecnoise = 0.;
my $index=0;
my $scan= ""; # gets used in a name
our($opt_t,$opt_z);
my $nsamples=0;
getopts ("t:");

my @tf;
my @tl;
my @rx;

my $extraopts = "";

if (defined($opt_z)) {$tzcorr = 60*$opt_z;} else {$tzcorr = 60*240;}

my $mytxpower = "";
my $usetxpower = 0;
my $setpower = 0;

if ($#ARGV < 0) {die $usage;}
$logfile= shift @ARGV;

open (LOGFILE, $logfile);

$nextisdate = 0;
$gotphase=0;
$gotphaselast=0;

LOGLOOP: while (<LOGFILE>) {
  chomp;
  if ($nextisdate) {
    ($Mon, $Day, $Hour, $Min, $Sec, $Year) = /\w+ (\w+) ([ \d]{2}) ([ \d]{2}):([ \d]{2}):([ \d]{2}) (\d{4})/;
    $Year -= 1900;
    $setup_secs = timelocal($Sec, $Min, $Hour, $Day, $months{$Mon}, $Year);
    $nextisdate = 0;
    next LOGLOOP;
  }
  if (/tx cycle.*up:(.[0-9:]+) \(([0-9]*)\).*\(([0-9]*)\)/ ){
    $txuptime= $1;
    my $txon = $2;
    my $txoff = $3;
    if ($txon >= 86400) { # Bug in software can give 24:xx:xx 
	$txon -= 86400;
	$txuptime =~ s/24:/00:/;
    }
    $txlength= $txoff - $txon;
    while ($txlength < 0) {$txlength += $SPD;}
  }
  if (/rx cycle.*up:(.[0-9:]+) \(([0-9]*)\).*\(([0-9]*)\)/ ){
    $rxuptime= $1;
    $rxlength = $3 - $2;
    while ($rxlength < 0) {$rxlength += $SPD;}

  }
# bistatic
  if (/tx start.*up:([ 0-9:]+) \(([0-9]*)\)/){
    $txuptime= $1;
    $txlength= 0;
    while ($txlength < 0) {$txlength += $SPD;}
  }
  if (/rx start.*up:([0-9:]+) \(([0-9]*)\)/){
    $rxuptime= $1;
    $rxlength = 0;
    while ($rxlength < 0) {$rxlength += $SPD;}

  }
  if (/closeloop.*up:(.[0-9:]+)\/(.*) down:(.[0-9:]*)/) {
    $txlength = $3 - $1;
    while ($txlength < 0) {$txlength += $SPD;}
    $rxlength = $txlength;
    $rxuptime=$2;
    $txuptime=$2;
  }
  if (/^sbinit logstart/) {$nextisdate = 1;}
  if (/^delayfrac = ([0-9]*)/) {$delayfrac = $1; }
  if (/fracBdUsecs:([-+\d.]*)/) {
    $fracBd = $1;
    $gotphase=1;
  }

  if (/fracBd:([-+\d.]*)/) {
    $fracBd = $1;
    $gotphase=1;
  }
  if (/^pncl = ([+-]?[0-9.]*)/) {
	if($1 == 1) {
		if ($opt_H) {
			$optlong = "-H ";
		} else {
    		print STDERR "
Default is Nolan Processing, -H for Harmon

";
			$optlong = "-L ";
		}
		$code = 1099511627775;
	} else {
		$optlong = "";
	}
  }
  if (/^pncgen\s*=\s*(\S+)/) {
	if($1 eq "pncl") {
		if ($opt_H) {
			$optlong = "-H ";
		} else {
    		print STDERR "
Default is Nolan Processing, -H for Harmon

";
			$optlong = "-L ";
		}
		$code = 1099511627775;
	} else {
		$optlong = "";
	}
  }

  # This one is the marker
  if (/rx on scan/) {
    $gotscan=1;
  }

  if($gotscan || ($gotphaselast && $opt_x)) {
    if ($gotscan) {
      $scan = $1;
    }
    $gotscan = 0; $gotphaselast=0;
    ($hour, $min, $sec) = ($txuptime =~ /(..):(..):(..)/);
    $txupsecs = timelocal($sec, $min, $hour, $Day, $months{$Mon}, $Year);
    while ($txupsecs < $setup_secs) { $txupsecs += 86400};  # must have crossed midnight
    ($hour, $min, $sec) = ($rxuptime =~ /(..):(..):(..)/);
    $rxupsecs = timelocal($sec, $min, $hour, $Day, $months{$Mon}, $Year);
    while ($rxupsecs < $setup_secs) { $rxupsecs += 86400};
    $ISOdateTXUP = strftime("%Y-%m-%dT%T", localtime($txupsecs+$tzcorr));
    $ISOdateTXDN = strftime("%Y-%m-%dT%T", localtime($txupsecs+$txlength+$tzcorr));
    $ISOdateRXUP = strftime("%Y-%m-%dT%T", localtime($rxupsecs+$tzcorr));
    #    $ISOdateRXDN = strftime("%Y-%m-%dT%T", localtime($rxupsecs+$rxlength+$tzcorr));

    push (@tf, $ISOdateTXUP);
    push (@tl, $ISOdateTXDN);
    push (@rx, $ISOdateRXUP);



  }
  if ($gotphase) {
    $gotphase = 0;
    $gotphaselast=1;
  }
}
my $tempf = File::Temp->new;
my $tempfname = $tempf->filename;
  for ($i=0; $i<=$#tf; $i++) {
    $tempf->print ("$tf[$i] $tl[$i] $rx[$i]\n");
  }

  if(defined($opt_t)) {
    for ($i = 0; $i < $#tf; $i++) {
      print "$rx[$i]Z $opt_t\n";
    }
  } else {
      print "\nParsing transmitter power log ...\n";
      $tempf->close() and $txpowerout = `txpower -s -L $tempfname`;  # grab txpower output for times in datafile
      print "$txpowerout";
      undef $tempf;

      if ($txpowerout =~ "ERROR") { 
	print STDERR "ERROR running txpower, try another way\n";
	exit;
      }  # quit chris_craft if power log is bad

      if ($txpowerout =~ /is\s*([0-9]+)\s*kW/) {
	$mytxpower = "-x $1";
      } else {
	undef $mytxpower;
      }
    }

