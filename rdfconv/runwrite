#!/usr/bin/perl -w

use Getopt::Std;
use Cwd;
use File::Spec;
$Getopt::Std::STANDARD_HELP_VERSION = 1;

our ($opt_h,$opt_n,$opt_l);

my $bundlelid ="urn:nasa:pds:gbo.ast.radar.arecibo.doppler_spectra_of_asteroids";
my $doi = "10.26033/j028-3a58";
getopts("nlh");

#@mdays = (0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
#This may give multiple lines. No good way to decide, so just choose the
# last matching one
#

if ($opt_h) { HELP_MESSAGE(); exit;}

sub HELP_MESSAGE {
  print <<'EOF';
Usage: runwrite [-n] logfile
          Runs idl code to generate csv versions of the scans in  a (CW) rdf file, then runs
              cwlabel to make the xml pds labels
          logfile: the "log_output" file generated by the most modern versions of chris_craft
       -n to generate the idl script but not run it or make the labels
       -l No idl or pdf2pdf, just make the labels
EOF
}
     
$here = cwd();
print "running runwrite in $here\n";
my $datafile ="";
my $obssysfile="${here}/obssys";

$logfile = $ARGV[0];

open ($lfh, "<$logfile") or die;

while (<$lfh>) {
  if (/Data file is:\s+(\S+)/) {
    $df = $1;
  }
  if (/Ephemeris file is:\s+(\S+)/) {
    $ephmfile = $1;
  }
  if (/(\S+\.hdr)/) {
    $hdrfile=$1;
    ($obj,$pdate,$res) = ($hdrfile =~ /(\S+?)\.(\S+?)\.(\S+?).cw/);
  }
}

die "No datafile found in logfile $logfile in dir $here\n" unless defined($df);

#Generate writefile

$rdffile = "$obj.$pdate.$res.rdf";
$pdsfile = "$obj.$pdate.$res";
@prettyfile = glob ("$obj.$pdate.*.cw.ps");
if ($#prettyfile < 0) {
  print "no Prettyfile matching $obj.$pdate.*.cw.ps\n"
} else {
  $prettyfile = $prettyfile[0];
  if (0 != $#prettyfile) {
    print "More than one prettyfile, choosing $prettyfile\n"
  }
}

if (! $opt_l) {
  open ($scrf, ">", "pdsscript.pro") || die;

  print $scrf <<EOF;
\@phil
\@rirawinit
\@cwinit
.r /home/pirl/nolan/idl/writepds
resetstack
readrdf, '$rdffile'
setpds, pname='${obj}_${pdate}_doppler_spectra'
setpds, editor='Nolan, M.C.'
pointing, data='$df', /noplot, /out, /stack
nst = getnstack()
for i = 1, nst do begin &\$
  addextra, 's', 'ephemeris', '$ephmfile', stack=i &\$
  addextra, 's', 'rawdata', '$df', stack=i &\$
endfor
writestackpds, '$pdsfile', /over
EOF
  close $scrf;
  `idl87 < pdsscript.pro`;
}
my $cmd = "cwlabel -L $bundlelid -S $obssysfile *.csv";
print "$cmd\n";
`$cmd`;
my $datanum = -1;
my $docpath;
if ($#prettyfile >= 0 && -e $prettyfile) {
   my @here = File::Spec->splitdir($here);
# data at the top level is not what we're looking for
   for (my $i = 2; $i <= $#here; $i++) {
     if ($here[$i] eq "data")  {
       $datanum = $i;
       last;
     }
   }

  my $prettypdf = $prettyfile;
  $prettypdf =~ s/.ps/.ps.pdfa.pdf/;
  $newprettyfile = $prettypdf;
  $newprettyfile =~ /(.+\.[s]?)(\d*)p([0]*)([1-9]?[0-9]*)(Hz\.cw.*$)/;
  if ($2 || $4) {
#  If either matches, then rewrite.
    my ($w,$z,$f);
    if (! $2) {$w = 0;} else {$w = $2;}
    if (! $4) {$z = "0"; $p = "";} else {
      $z = $3;
      $p = substr(sprintf("%.2f", "0.$4"),2,2);
    }
    $newprettyfile = "$1${w}p$z$p$5";
  }

  $newprettyfile =~ s/ps.pdfa.//;
  if (! $opt_l) {
    `pdf2pdfa $prettyfile`;
    rename $prettypdf, $newprettyfile || die "error in renaming";
  }
  print "Prettyfile $newprettyfile\n";
  if ($datanum >= 0) {
    $here[$datanum] = "document";
    $docpath = File::Spec->catdir(@here);
    if ( ! $opt_l) {
      `mkdir -p $docpath; mv $newprettyfile $docpath/$newprettyfile`;
    }
    `cd $docpath ; prettylabel -L $bundlelid -O $doi -S $obssysfile $docpath/$newprettyfile `;
  } else {
    print "Not in data tree, can't install prettyfile\n";
  }
} else {
  print "No cwsumpretty\n";
}

