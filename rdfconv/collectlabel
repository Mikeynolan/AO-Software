#!/usr/bin/perl -w
#use Text::CSV;
use Getopt::Std qw(getopts);
use strict;
use warnings;
use POSIX;

# For the cheezy csv parser
my $sep = ',';
my $re = qr/(?:^|$sep)(?:"([^"]*)"|([^$sep]*))/;

my $file;
our ($opt_e, $opt_T, $opt_d, $opt_D, $opt_I, $opt_t, $opt_h);
our $tfh;
our ($title, $descr, $date, $year, $docname, $editor);

getopts('t:e:d:D:I:h');

if ($opt_h) {
 print STDERR <<EOT;
Usage: collectlabel -d "Description" -T "Title" -e "Editor, T." [-I date] [-t template] [-D "Docname"] [-h] Targets data.csv doc.csv
         Targets is the list of targets. data.csv and docs.csv are the inventory files for the data and documentation directories, respectively.
    -T:  Set title (required)
    -d:  Set Description (required)
    -e:  Set editor *required* 
    -I:  date - default: use today
    -D:  Docname - default: generate from file name by capitalizng and removing extension
    -t:  Use template as a template for the xml. Default is internal template
    -h:  Print this message.
EOT
 exit;
}

if ($opt_e) {
 $editor = $opt_e;
} else {
 die "Editor option is required";
}
if ($opt_T) {
  $title=$opt_T;
} else {
  die "title option is required";
}
if ($opt_d) {
  $descr = $opt_d;
} else {
  die "Description option is required";
}
if ($opt_I) {
  $date = $opt_I;
  $date =~ /(\d\d\d\d)-\d\d-\d\d/ || die "Date must be YYYY-MM-DD";
  $year = $1;
} else {
  $date = strftime "%F", localtime;
  $year = strftime "%Y", localtime;
}
if ($opt_D) {
  $docname = $opt_D;
} else {
  $docname = $file;
  $docname =~ s/.pdf$//;
  $docname =~ s/([\w']+)/\u\L$1/;
}
if ($opt_t) {
 open($tfh, "<", $opt_t) || die;
} else {
 open($tfh, "<", gettemplate()) || die;
}

foreach $file (@ARGV) {
 my %replace;
 my $author = '';
 my $editor = '';
 my ($cdate,$start,$lcstart,$stopt,$pname,$tname,$bookmark);
 my ($ncols,$version,$ttype,$rdffile,$xmlname);
 my $tell = 0;
 $replace{'XXXPTITLE'} = $title;
 $replace{'XXXFILENAME'} = $file;
 $replace{'XXEDITOR'} = $editor;
 $replace{'XXXDESCRIPTION'} = $descr;
 $replace{'XXXDATE'} = $date;
 $replace{'XXXYEAR'} = $year;
 $replace{'XXXDOCNAME'} = $docname;

# And do the replace on the template.
 my $regex = join "|", map { quotemeta } keys %replace;
 $regex = qr/$regex/;

 seek($tfh, 0, 0) || die; #rewind template

 ($xmlname = $file) =~ s/\.pdf$/.xml/;
 open (my $xfh, "> $xmlname") || die;
 while (<$tfh>) {
  s/($regex)/$replace{$1}/g;
  print $xfh $_;
 }
 close $xfh;

} # While @ARGV


sub obssys {
# We need to parse the bookmarks and create a string with the various pieces
# This is probably easiest to do pretty brute force.

my $book = $_[0];
# Was a telescope used (telescope and facility.
# observatories
my $ao = 0;
my $gold = 0;
my $gbt = 0;
# facilities
my $ao305 = 0;
my $dss14 = 0;
my $dss13 = 0;
my $gbtt = 0;
# instruments
my $aotx = 0;
my $aorx = 0;
my $dss14tx = 0;
my $dss14rx = 0;
my $sdd13tx = 0;
my $dss13rx = 0;
my $gbtrx = 0;
# which did we use for what
my $tx = 0;
my $rx = 0;
# backends
my $aori = 0;
my $pfs = 0;

my %sta= (
  -9 => 'GBT',
  -14 => 'DSS-14',
  -13 => 'DSS-13',
  -1 => 'Arecibo'
);

if ($book =~ /AO TX/) {
 $ao = 1;
 $ao305 = 1;
 $tx = -1;
 $aotx = 1;
}
if ($book =~ /AO RX/) {
 $ao = 1;
 $ao305 = 1;
 $aorx = 1;
 $rx = -1;
}
if ($book =~ /AO RI/) {
 $ao = 1;
 $aori = 1;
}
if ($book =~ /DSS14 TX/) {
 $gold = 1;
 $dss14 = 1;
 $dss14tx = 1;
 $tx = -14;
}
if ($book =~ /DSS14 RX/) {
 $gold = 1;
 $dss14 = 1;
 $dss14rx = 1;
 $rx = -14;
}
if ($book =~ /PFS/) {
 $pfs = 1;
}
if ($book =~ /GBT/) {
 $gbt = 1;
 $gbtt = 1;
 $gbtrx = 1;
 $rx = -9
}
my $sysname;
if ($tx == $rx) {
 $sysname="Monostatic " . $sta{$tx} . " Radar";
} else {
 $sysname="Bitstatic " . $sta{$tx} . "-" . $sta{$rx} . " Radar";
}
my $obssys = <<EOT;
    <Observing_System>
      <name>$sysname</name>
EOT
if ($ao) {
 $obssys .= <<EOT;
      <Observing_System_Component>
        <name>Arecibo Observatory</name>
        <type>Observatory</type>
        <Internal_Reference>
          <lid_reference>urn:nasa:pds:context:facility:observatory.arecibo</lid_reference>
          <reference_type>is_facility</reference_type>
        </Internal_Reference>
      </Observing_System_Component>
EOT
}
if ($ao305) {
 $obssys .= <<EOT;
      <Observing_System_Component>
        <name>305-m fixed spherical reflecting antenna</name>
        <type>Telescope</type>
        <Internal_Reference>
          <lid_reference>urn:nasa:pds:context:telescope:arecibo.305m</lid_reference>
          <reference_type>is_telescope</reference_type>
        </Internal_Reference>
      </Observing_System_Component>
EOT
}
if ($aotx) {
 $obssys .= <<EOT;
      <Observing_System_Component>
        <name>Arecibo Planetary Radar Transmitter</name>
        <type>Instrument</type>
        <Internal_Reference>
          <lid_reference>urn:nasa:pds:context:instrument:arecibo.305m.trans_s</lid_reference>
          <reference_type>is_instrument</reference_type>
        </Internal_Reference>
      </Observing_System_Component>
EOT
}
if ($aorx) {
 $obssys .= <<EOT;
      <Observing_System_Component>
        <name>Arecibo 2380 MHz Radar Receiver</name>
        <type>Instrument</type>
        <Internal_Reference>
          <lid_reference>urn:nasa:pds:context:instrument:arecibo.305m.recv_s</lid_reference>
          <reference_type>is_instrument</reference_type>
        </Internal_Reference>
      </Observing_System_Component>
EOT
}
if ($gold) {
 $obssys .= <<EOT;
      <Observing_System_Component>
        <name>Goldstone Complex</name>
        <type>Observatory</type>
        <Internal_Reference>
          <lid_reference>urn:nasa:pds:context:facility:observatory.goldstone</lid_reference>
          <reference_type>is_facility</reference_type>
        </Internal_Reference>
      </Observing_System_Component>
EOT
}
if ($dss14) {
 $obssys .= <<EOT;
      <Observing_System_Component>
        <name>70-m steerable parabolic radio telescope</name>
        <type>Telescope</type>
        <Internal_Reference>
          <lid_reference>urn:nasa:pds:context:telescope:goldstone.dss14_70m</lid_reference>
          <reference_type>is_telescope</reference_type>
        </Internal_Reference>
      </Observing_System_Component>
EOT
}
if ($dss14tx) {
 $obssys .= <<EOT;
      <Observing_System_Component>
        <name>Goldstone Solar System Radar Receiver</name>
        <type>Instrument</type>
        <Internal_Reference>
          <lid_reference>urn:nasa:pds:context:instrument:goldstone.dss14_70m.recv_x</lid_reference>
          <reference_type>is_instrument</reference_type>
        </Internal_Reference>
      </Observing_System_Component>
EOT
}
if ($dss14rx) {
 $obssys .= <<EOT;
      <Observing_System_Component>
        <name>Goldstone Solar System Radar Transmitter</name>
        <type>Instrument</type>
        <Internal_Reference>
          <lid_reference>urn:nasa:pds:context:instrument:goldstone.dss14_70m.trans_x</lid_reference>
          <reference_type>is_instrument</reference_type>
        </Internal_Reference>
      </Observing_System_Component>
EOT
}
if ($pfs) {
 $obssys .= <<EOT;
      <Observing_System_Component>
        <name>Radar Portable Fast Sampler</name>
        <type>Instrument</type>
      </Observing_System_Component>
EOT
}
if ($aori) {
 $obssys .= <<EOT;
      <Observing_System_Component>
        <name>Arecibo Observatory Radar Interface</name>
        <type>Instrument</type>
      </Observing_System_Component>
EOT
}
# Close out
$obssys .= "    </Observing_System>";
# Make sure each \n has exactly one \r
$obssys =~ s/(\r)*\n/\r\n/g;
return $obssys;
}
sub gettemplate {
#
# THere are issues both with having this here and with a separate file.
#
our $template3 = <<EOT;
<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="https://pds.nasa.gov/pds4/pds/v1/PDS4_PDS_1F00.sch" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<Product_Document xmlns="http://pds.nasa.gov/pds4/pds/v1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://pds.nasa.gov/pds4/pds/v1 https://pds.nasa.gov/pds4/pds/v1/PDS4_PDS_1F00.xsd">
  <Identification_Area>
    <logical_identifier>urn:nasa:pds:no_bundle:document:organization.pdf.pdfa</logical_identifier>
    <version_id>1.0</version_id>
    <title>XXXPTITLE</title>
    <information_model_version>1.15.0.0</information_model_version>
    <product_class>Product_Document</product_class>
    <Citation_Information>
      <editor_list>XXXEDITOR</editor_list>
      <publication_year>XXXYEAR</publication_year>
      <description>XXXDESCRIPTION</description>
    </Citation_Information>
  </Identification_Area>
  <Document>
    <document_name>XXXDOCNAME</document_name>
    <editor_list>XXXEDITOR</editor_list>
    <publication_date>XXXDATE</publication_date>
    <Document_Edition>
      <edition_name>ADOBE PDF</edition_name>
      <language>English</language>
      <files>1</files>
      <Document_File>
        <file_name>XXXFILENAME</file_name>
        <document_standard_id>PDF/A</document_standard_id>
      </Document_File>
    </Document_Edition>
  </Document>
</Product_Document>
EOT

return \$template3;
}

