#!/usr/bin/perl
#
##  CONFIGURE
# This script uses $AOMETADATA as the search place for logs, can also set
# a default here. Comment out if not desired.
# TODO: This assumes only one path for metadata, will need changed if
# subdirs are needed.
$ao_metadatadefault="/data/aodata/share/obs4/lro";
#$ao_metadatadefault="/share/obs4/lro";
#
#$AOPATH="/some/path/";
if (! defined ($AOPATH)) { $AOPATH = ""; }
#If you want to hard code the path like at Arecibo, put the path here.
#Otherwise set it to empty.
#Note: It must end with a slash, so that if it's *not* set, you 
#will get the default.
#
# 2013 Dec 28  PT : added -t option to search for power near a requested time
# 2014 Jan 13  PT : removed -t option, see below
#                   added -f and -l options to average values between times
#                   added -a, -r, and -d options to allow a datafile as input
#                    to get the average power during each scan
# 2014 May  5  PT : major overhaul!
#                   read in entire power log before searching (this greatly 
#                    speeds up searches for datafiles as it avoids recursive 
#                    txpower calls that re-read the power log for each scan)
#                   added -u to grab one specific time
#                   changed -f to dump all times following it
# 2015 Jan 23  PT : only report powers within -b [buffer] minutes of request
#                    and print an error if no valid powers are found
# 2017 Dec  7  PT : changed a few instances of $bestj to $closestj to avoid
#                    dumping the entire power log if no valid powers are found
#                    within the $opt_b buffer of the requested time
# 2019 Aug 21  PT : allow the program to bail if first time request precedes
#                    first log entry rather than reading in the entire log
# 2020 Mar 19  PT : added additional checks of values for command-line options
#                   bail out more gracefully if the datafile is not found
# 2020 Apr 14  PT : added auto-detect for monlro power log based on dates
# 2020 Apr 30  PT : allow for three-letter month inputs on command line
# 2020 Jul 14  PT : added check for when getp/monlro values were bad (7/20)
#                   modified some 'die' statements to 'print/exit' to allow
#                    chris_craft to react to them
# 2022 Aug 14  PT : added check for date request on same date logfile renamed
# 2023 Jul 26  MCN: add enviroment variable to set paths for AO metadata

use Getopt::Std;
#use strict;

our($opt_a, $opt_b, $opt_d, $opt_f, $opt_l, $opt_o, $opt_p, $opt_r, $opt_z,$opt_L);
my ($year, $month, $day, $hour, $min, $sec, $jd, $rest, $jduserf, $jduserl, $jdlogs);
my ($mjd, $val, $time, $power, $bestmjdf, $bestvalf, $besttimef, $bestpowerf, $bestf, $marginf);
my ($bestmjdl, $bestvall, $besttimel, $bestpowerl, $bestl, $marginl, $powerstoavg);
my ($lastj, $closestj, $failedf, $failedl, $logfile);

getopts("ab:d:f:hl:L:p:r:su:vz");

$usage = "\nUsage: txpower [-a -v -p logfile -r RTT -u uniqueTime -f startTime -l endTime -d datafile]\n
Default output with no options is full dump of monlro power logs\n
 -a = user-given times are in AST (will be converted to UT)
 -v = verbose output of power values between -f and -l times
 -p logfile = filename of power log (default = auto-select from $mdpath/pwrdata.log.*)
 -r RTT = round-trip time in seconds (to subtract from user-given times, overrides calculation by -d)
 -b buffer = find only valid transmitter powers within buffer minutes of requested times (default = 10 or 5*RTT)
 -u 'time' = grep one unique time ('YYYY-MM[M]-DD HH:MM:SS' in UT)
             useful for finding closest log entry to a desired time to then set -f and -l (and/or -b)
 -f 'time' = dump everything after a specific time ('YYYY-MM[M]-DD HH:MM:SS' in UT)
 -l 'time' = output average power from -f to this time; use -v to dump intermediate values 
             (can have problems with RTT ~ 10-20 sec ~ cadence of power logging)
 -d datafile = use showriscans to get times (defaults to -a and calculates -r RTT itself)
 -s          silent except for specific output
 -L listoftimes -> like -d, but use a file that contains Lines with TXstart, TXend, RXstart.
             outputs a file with lists of RXstart and power.\n\n";

if (($#ARGV > -1) || ($opt_h) || ($opt_z)) { die $usage }

# check for issues with values of command-line options

for ($opt_r, $opt_b)  # must be numbers
{
    if (defined && !(/^[.0-9]+$/)) { die "\n ERROR:  Options [rb] must have (positive) integer values!\n$usage" }
}

for ($opt_p, $opt_u, $opt_f, $opt_l, $opt_d)  # check if filenames and times are blank and followed by another flag
{
    if (defined && (/^-/)) { die "\n ERROR:  Options [pufld] must be alphanumeric!\n$usage" } 
}

# before reading power log, check if any times are requested

my @starttimes;
my @stoptimes;
my @rx;
my $rx;
$#starttimes = -1;  # user-given start times from -u, -f, or -d
$#stoptimes = -1;   # user-given stop times from -f or -d

# check for valid time requests

if (($opt_f) && ($opt_u)) { die "\n ERROR:  Can specify -u or -f but not both!\n\n" }

@Months = ("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec");

if (($opt_f) || ($opt_u)) {  # user-given time for power request
    if ($opt_u) {$opt_f = $opt_u}

    $opt_f =~ s/-//gi;  # remove any hyphens
    $opt_f =~ s/://gi;  # remove any colons
    $opt_f =~ s/T//gi;  # remove any T's
    $opt_f =~ s/ //gi;  # remove any blank spaces

    $monthtest = substr($opt_f,4,3);  # grab what could be a three-letter month name
    if ($monthtest =~ "[a-zA-z]")     # if it has any letters, check against month names
    {

	$month = lc $monthtest;      # make sure month is lowercase
	$month =~ s/^([a-z])/\U$1/;  # make sure first letter of month is uppercase

	$check = 0;
	for ($i=0; $i <= $#Months; $i++) {  # check if month name is allowed
	    if ($Months[$i] eq $month)      # if matching
	    { 
		$check = 1;
		$month = $i+1;              # translate to a month number
		if ($month < 10) { $month = "0".$month }  # and pad to two digits
	    }
	}
	
	$opt_f = join("", substr($opt_f,0,4), $month, substr($opt_f,7));  # put time request back together

	if ($check == 0) { die "\n ERROR:  Requested time (-f/-u) not recognized!  Must be of format 'yyyy-mm[m]-dd hh:mm'  Check month name!\n\n" }
    }

    if (length($opt_f) < 14) { print STDERR "\n WARNING: Requested time (-f/-u) is shorter than YYYYMMDDHHMMSS so padding with zeroes!\n" }
    while (length($opt_f) < 14) { $opt_f = $opt_f . '0' }

    push @starttimes, $opt_f;  # add -f (or -u) start time to the array
}

if (($opt_l) && (not $opt_f)) { die "\n ERROR:  Must specify a start time with -f also!\n\n" }

if ($opt_l) {  # user-given time for power request

    $opt_l =~ s/-//gi;  # remove any hyphens
    $opt_l =~ s/://gi;  # remove any colons
    $opt_l =~ s/T//gi;  # remove any T's
    $opt_l =~ s/ //gi;  # remove any blank spaces

    $monthtest = substr($opt_l,4,3);  # grab what could be a three-letter month name
    if ($monthtest =~ "[a-zA-z]")     # if it has any letters, check against month names
    {

	$month = lc $monthtest;      # make sure month is lowercase
	$month =~ s/^([a-z])/\U$1/;  # make sure first letter of month is uppercase

	$check = 0;
	for ($i=0; $i <= $#Months; $i++) {  # check if month name is allowed
	    if ($Months[$i] eq $month)      # if matching
	    { 
		$check = 1;
		$month = $i+1;              # translate to a month number
		if ($month < 10) { $month = "0".$month }  # and pad to two digits
	    }
	}
	
	$opt_l = join("", substr($opt_l,0,4), $month, substr($opt_l,7));  # put time request back together

	if ($check == 0) { die "\n ERROR:  Requested time (-l) not recognized!  Must be of format 'yyyy-mm[m]-dd hh:mm'  Check month name!\n\n" }
    }

    if (length($opt_l) < 14) { print STDERR "\n WARNING: Requested time (-l) is shorter than YYYYMMDDHHMMSS so padding with zeroes!\n" }
    while (length($opt_l) < 14) { $opt_l = $opt_l . '0' }

    push @stoptimes, $opt_l;  # add -l stop time to the array
}

if ($opt_d) {  # use showriscans to get times from datafile
    if (-f $opt_d)
    {
	$opt_a = 1;  # must also envoke the -a option since receive times are in AST

	open (DATA, "${AOPATH}showriscans $opt_d |");
	while ($line = <DATA>) {
	    if ($line =~ "^Date:([0-9]{4})-([0-9]{2})-([0-9]{2}) Time:([0-9]{2}):([0-9]{2}):([0-9]{2})-([0-9]{2}):([0-9]{2}):([0-9]{2}) Scan") {
		$opt_f = $1.$2.$3.$4.$5.$6;  # collect RX start time
		$opt_l = $1.$2.$3.$7.$8.$9;  # collect RX stop time
		if ($opt_l < $opt_f) { $opt_l += 1000000 }  # stop time is beyond AST midnight so add a day (dhhmmss) before translating to JD
		push @starttimes, $opt_f;    # add -f start time to array
		push @stoptimes, $opt_l;     # add -l stop time to array
	    }
	}
    } else { die "\n ERROR:  Datafile $opt_d not found!\n\n" }
}
if ($opt_L) { # List of times
  open(DATA, "<$opt_L") || die $!;
  while (<DATA>) {
    /\s*([0-9]{4})-([0-9]{2})-([0-9]{2}).([0-9]{2}):([0-9]{2}):([0-9]{2})\s+([0-9]{4})-([0-9]{2})-([0-9]{2}).([0-9]{2}):([0-9]{2}):([0-9]{2})\s+([0-9]{4})-([0-9]{2})-([0-9]{2}).([0-9]{2}):([0-9]{2}):([0-9]{2})/;
     $opt_f = $1.$2.$3.$4.$5.$6;
     $opt_l = $7.$8.$9.$10.$11.$12;
     $rx = "$13-$14-$15T$16:$17:$18Z";
     push @starttimes, $opt_f;
     push @stoptimes, $opt_l;
     push @rx, $rx;
   }
 }


# to save time, store the first requested time to compare with the first entry of the power log
# so that if the request precedes the start of the log, it can bail without reading the entire log

$jduserf = julian(substr($starttimes[0],0,4), substr($starttimes[0],4,2), substr($starttimes[0],6,2)+(substr($starttimes[0],8,2)+(substr($starttimes[0],10,2)+substr($starttimes[0],12,2)/60.)/60.)/24.);
if ($opt_a) {$jduserf = $jduserf + 4.0/24.}                # if input was AST, add 4 hours to get UT

# get the desired power log

if ($opt_p) {  # user provided

    $logfile = $opt_p;  # user-given monlro power log

} else {  # auto-detect proper power log

	if(defined $ENV{'AO_METADATA'}) {
		$mdpath=$ENV{'AO_METADATA'};
	} elsif (defined(${ao_metadatadefault})) {
		$mdpath=${ao_metadatadefault};
	} else {  print "\n ERROR:  No file specified and no path set for power monitor data.\n\n"; exit;
	}

    if ($#starttimes > -1)  # if there are start times with -f, -u, -l, or -d get yymmdd
    {

# Grab the date from the first start time found from -f, -u, or -d

	$yymmdd = substr($starttimes[0], 2, 6);

# Cannot use 'die' statements if chris_craft is to respond based on ERROR output from txpower

	if ($yymmdd < 120801) { print "\n ERROR:  Cannot use monlro for dates prior to August 2012!  Check date request!\n\n"; exit }

	if (($yymmdd > 200619) && ($yymmdd < 200723)) { print "\n ERROR:  Do not trust monlro power logs from this date!  Check logbook for operator power level.\n         If running chris_craft, use -t flag!\n\n"; exit }

	@powerloglist = `ls $mdpath/pwrdata.log.??????`;  # power logs moved by Phil

	chomp @powerloglist;
	push(@powerloglist, "$mdpath/pwrdata.log.000");  # add the current power log file

	for ($i = 0; $i < $#powerloglist; $i++)  # loop through filenames
	{
	    $powerlogdate = substr($powerloglist[$i],-6,6);  # grab yymmdd date 
	    push(@powerlogdates, $powerlogdate);
	}

	push(@powerlogdates, 999999);  # add 999999 as an absurd date for "now"
    
	for ($i = $#powerlogdates; $i >= 0; $i--)  # find closest power log date
	{
	    if ($yymmdd <= $powerlogdates[$i]) { $logfile = "$powerloglist[$i]" }
	    if ($yymmdd == $powerlogdates[$i]) { print STDERR "\n WARNING:  Date requested matches date power logs were moved!\n           Using $mdpath/pwrdata.log.$powerlogdates[$i] but may need to use -p with the\n            next file in $mdpath/pwrdata.log.* if no valid data is returned!\n" }
	}
	
    } else { $logfile = "$mdpath/pwrdata.log.000" }  # otherwise use current logfile

}

# prepare arrays for reading in entire power log

$#jdlist = -1;     # JDs from power log
$#mjdlist = -1;    # MJDs from power log
$#vallist = -1;    # powers in dBs
$#timelist = -1;   # times translated from power log
$#powerlist = -1;  # powers in kW

open(FH, "<$logfile") || die "\n ERROR:  Could not open power log $logfile !\n\n";

# read in entire power log

if (not $opt_s) {print "\nParsing power log:  $logfile ...\n\n";}

while (<FH>) {
    ($mjd, $val) = /[^0-9]*([0-9.]+)\s+([-+0-9.E]+)/;  # read MJDs and powers
    if (! $mjd) {next;}  # if line does not match expression, move to next line
    ($year, $month, $day) = caldat($mjd+.5);  # translate to calendar date
    $rest = ($day - int($day)) * 24;
    $day = int($day);
    $hour = int($rest);
    $rest = ($rest - $hour) * 60;
    $min = int($rest);
    $sec = ($rest - $min) * 60;

# format the time as a calendar/clock date/time

    $time = sprintf "%4d-%02d-%02dT%02d:%02d:%02d", $year, $month, $day, $hour, $min, int($sec + 0.5);
    $power = sprintf "%5.1f", 10**(8.28 + $val / 10) / 1000000;  # power in kW

# populate the arrays with the times and powers in the power log

    push @mjdlist, $mjd;
    push @vallist, $val;
    push @timelist, $time;
    push @powerlist, int($power+0.5);
    push @jdlist, julian($year,$month,$day+($hour+($min+int($sec + 0.5)/60.)/60.)/24.);

# bail now if the first line of power log is after the requested time instead of reading the whole log

    if (($opt_f) && ($jduserf < $jdlist[0])) { die "\n ERROR:  Request is for prior to beginning of power log!  Check time and power-log filename requests!\n\n" }

}

close FH;  # finished with the power log

$bestj = 0;  # reset best index as it will matter in a later loop

for ($i=0; $i<=$#starttimes; $i++)  # loop through start times
{

    # get the julian date of the start time

    $jduserf = julian(substr($starttimes[$i],0,4), substr($starttimes[$i],4,2), substr($starttimes[$i],6,2)+(substr($starttimes[$i],8,2)+(substr($starttimes[$i],10,2)+substr($starttimes[$i],12,2)/60.)/60.)/24.);
    if ($opt_a) {$jduserf = $jduserf + 4.0/24.}                # if input was AST, add 4 hours to get UT


    if ($jduserf < $jdlist[0]) { print "\n ERROR:  Request is for prior to beginning of power log!  Check time and power-log filename requests!\n\n"; exit }

    $bestf = 1000000000;  # set time difference to a ludicrous value
    
    if ($#stoptimes > -1)  # either -l or -d was used
    {

	# get julian date of the stop time

	$jduserl = julian(substr($stoptimes[$i],0,4), substr($stoptimes[$i],4,2), substr($stoptimes[$i],6,2)+(substr($stoptimes[$i],8,2)+(substr($stoptimes[$i],10,2)+substr($stoptimes[$i],12,2)/60.)/60.)/24.);
        if ($opt_a) {$jduserl = $jduserl + 4.0/24.}                  # if input was AST, add 4 hours to get UT
        if (($opt_d) && (not $opt_r)) {$opt_r = ($jduserl-$jduserf)*24.*60.*60. + 8.}  # if using a datafile, estimate RTT from start and stop times
        if ($opt_r) {$jduserl = $jduserl - $opt_r/(24.*60.*60.)}     # subtract RTT from input

	if ($jduserl > $jdlist[$#jdlist]) { print "\n ERROR:  Request extends beyond end of power log!  Check time and power-log filename requests!\n\n"; exit }

	$bestl = 1000000000;  # set time difference to a ludicrous value
	$#powers = -1;        # reset arrays and counters for calculating average powers
	$powerstoavg = 0.;
	$avgpower = 0.;
	$#times = -1;
    }

    # RTT check is done here for start time in case the RTT is determined from the stop time (above) in the datafile rather than -r directly

    if ($opt_r) { $jduserf = $jduserf - $opt_r/(24.*60.*60.)}  # subtract RTT from input
    
    # adjust the buffer margin if necessary

    if (not $opt_b)  # no user-defined buffer time
    { 
	if ($opt_r) { $opt_b = 5.*$opt_r/60. }  # default to greater of 10 minutes or 5*RTT
	if ($opt_b < 10.) {$opt_b = 10.}
    }
    $buffer = $opt_b/60/24.;  # in days since calculations are in JD

    $failedf = 0;  # reset whether start time has been passed without finding valid powers within buffer
    $failedl = 0;  # reset whether stop time has been passed without finding valid powers within buffer
    
    SEARCH : {                                # name the search loop so we can break it once the best stop time is passed
	for ($j=$bestj; $j<=$#mjdlist; $j++)  # search the power logs starting from 0 or $bestj from the previous start time
	{
	    $marginf = abs($jdlist[$j] - $jduserf);  # time difference between current power log value and start time

	    # check if time difference is improving and there is a logical power value and save best values

	    if (($marginf < $bestf) && ($powerlist[$j] > 1.0) && ($powerlist[$j] < 2000.0)) 
	    {
		$closestj = $j;
		$bestf = $marginf;
		if ($marginf < $buffer)  # actually close to requested time
		{
		    $besttimef = $timelist[$j];    # keeps overwriting within buffer until true $bestf is found then
		    $bestpowerf = $powerlist[$j];  #  the ($margin < $bestf) loop will fail and keep best time/power
		    $bestj = $j;
		}

	    # bail out if time difference is no longer improving and no valid powers have been found 

	    } elsif (($marginf > $bestf) && ($bestj == 0) && ($failedf == 0)) 
	    { 
		print STDERR " WARNING: Cannot find valid transmitter powers within $opt_b minutes of time $starttimes[$i]!\n\n";
		$failedf = 1;
	    }
	    
	    if ($#stoptimes > -1)  # if searching for a range of times with -l or -d
	    {  
		$marginl = abs($jdlist[$j] - $jduserl);  # time difference between current power log value and stop time
		
		# if this time is after the start time and getting closer to the stop time
		#  (and has a logical power value) then store it in an array
		
		if (($marginf > $bestf) && ($marginl < $bestl) && ($powerlist[$j] > 1.0) && ($powerlist[$j] < 2000.0))
		{
		    if (($marginl < abs($jdlist[$bestj] - $jduserl)))  # check if $bestj is better fit than current $j
		    {                                                  #  this may happen on short RTT ~ 10 or 20 sec
			$powerstoavg = push @powers, $powerlist[$j];
			$timesallowed = push @times, $timelist[$j]; 
			$bestl = $marginl; 
			$besttimel = $timelist[$j]; 
			$bestpowerl = $powerlist[$j];
			$lastj = $j;
		    } else {  # for short RTTs, the same time may be best/most valid for both the start and stop times 
			$powerstoavg = push @powers, $powerlist[$bestj];
			$timesallowed = push @times, $timelist[$bestj]; 
			$bestl = abs($jdlist[$bestj]-$jduserl); 
			$besttimel = $timelist[$bestj]; 
			$bestpowerl = $powerlist[$bestj];
			$lastj = $bestj;
		    }
		} else {
		    if (($marginl > $bestl) || ($j == $#mjdlist))  # break search if beyond best match for stop time or reached end of power list
		    {
			if ($opt_v)  # if verbose, print everything between best -f and best -l times
			{
			    for ($k=$closestj; $k<=$lastj; $k++)  # using $closestj instead of $bestj to avoid dumping entire file if no valid
                                                                  #  powers are within $opt_b buffer of $opt_f 
			    {
				printf "%s  %11s  :  %s %4i kW\n", $mjdlist[$k], $vallist[$k], $timelist[$k], $powerlist[$k]+0.5;
			    }
			}

			if (abs($jdlist[$lastj]-$jduserl) < $buffer)  # if closest power reading is within buffer, calculate average power
			{
			    if ($failedf == 0)
			    {
				$avgpower = $bestpowerf/($powerstoavg+1.);  # need to include power for the first time
				for ($k=0; $k<$powerstoavg; $k++) {$avgpower += $powers[$k]/($powerstoavg+1.)}
				$avgpower = int($avgpower+0.5);
				push @powerarray, $avgpower;  # keep an array of the average powers for chris_craft

				# output results to screen

				if (not $opt_s) {
				  printf("Request power between %s-%s-%sT%s:%s:%s and %s-%s-%sT%s:%s:%s", substr($starttimes[$i],0,4), substr($starttimes[$i],4,2), substr($starttimes[$i],6,2), substr($starttimes[$i],8,2), substr($starttimes[$i],10,2), substr($starttimes[$i],12,2), substr($stoptimes[$i],0,4), substr($stoptimes[$i],4,2), substr($stoptimes[$i],6,2), substr($stoptimes[$i],8,2), substr($stoptimes[$i],10,2), substr($stoptimes[$i],12,2));
				  if ($opt_r) {printf " minus RTT of %i sec", $opt_r+0.5}
				  if ($opt_a) {print " and adjusted +4:00:00 to UTC\n"} else {print "\n"}
				  printf("Average power between %s and %s is %3i kW\n\n", $besttimef, $besttimel, $avgpower);
				}
			    }
			} elsif ($failedl == 0) { 
			    print STDERR " WARNING: Cannot find valid transmitter powers within $opt_b minutes of stoptime $stoptimes[$i]!\n           Use -v to determine if any valid powers exist between requested times!      \n\n";
			    $failedl = 1;
			}
			
			last SEARCH;  # break the search loop and move to next start time
		    }
		}
	    }
	}
    }
}

if ($opt_d)  # output average powers for scans in datafile for chris_craft and over entire datafile for log2table.pl
{
    $fullavgpwr = 0.;
    print "List of average powers for chris_craft:  -t \'";
    for ($i=0; $i<=$#powerarray; $i++) {print "$powerarray[$i] "; $fullavgpwr += $powerarray[$i]/($#powerarray+1.)}
    print "\'\n";
    printf "Overall average power for log2table.pl:  -t %3i\n", $fullavgpwr;
}
if ($opt_L) {# make a file with the times and powers
   for ($i=0; $i<=$#powerarray; $i++) {
     print "$rx[$i] $powerarray[$i]\n";
   }
 }


if (not $opt_l)  # using -l dumps output in loops above rather than here (-d assigns $opt_f and $opt_l so it skips this part)
{
    $lastj = $#mjdlist;
    if (not $opt_f) {$bestj = 0}   # -f or -u not used, so dump everything
    if ($opt_u) {$lastj = $bestj = $closestj; print "Closest time in log is:\n"}  # -u only dumps nearest power reading
# using $closestj instead of $bestj will avoid dumping entire file if no valid powers exist within $opt_b buffer of $opt_f time
#    for ($i=$bestj; $i<=$lastj; $i++) {printf "%s  %11s  :  %s %4i kW\n", $mjdlist[$i], $vallist[$i], $timelist[$i], $powerlist[$i]+0.5}
    for ($i=$closestj; $i<=$lastj; $i++) {printf "%s  %11s  :  %s %4i kW\n", $mjdlist[$i], $vallist[$i], $timelist[$i], $powerlist[$i]+0.5}
}
   
exit;

# Subroutine converts d,m,y to jd
sub julian {
    
    my($year, $month, $day) = @_;
#	my($julcdr) = $_[3];     # test for gregorian maybe
    my($julcdr) = 0;		# but not yet
    my($lcy, $lcm, $lpyr, $lpdays);
  
#     Trap invalid months
  
    if ($month < 1 || $month > 12) {
	return(-1);
#	    die ("***JULIAN: Month outside the range 1 to 12");
    }
#     Adjust 'internal' calendar to start in March so that leap days
#     occur at end of year
  
    if ($month > 2) {
	$lcy = $year;
	$lcm = $month + 1;
    } else {
	$lcy = $year - 1;
	$lcm = $month + 13;
    }
  
#     If Gregorian calendar, adjust for missing leap days
  
    if ($julcdr) {
	$lpdays = 0;
    } else {
	$lpyr = $lcy;
	if ($lpyr < 0) {$lpyr++};
#	$lpdays = 2.0 - $lpyr/100.0 + $lpyr/400.0;  # yield fractional leap days
	$lpdays = 2.0 - int($lpyr/100.) + int($lpyr/400.);  # yield integer leap days
    }
  
#     Accumulate Julian Date based on number of days per year and month

    $jdy = 365.25 * $lcy;
    if ($lcy < 0) {$jdy -= 0.75;}
    $jdm = 30.6001 * $lcm;
    return(int($jdy) + int($jdm) + $day + 1720994.5 + $lpdays);
}

sub caldat {
# MANGLED FOR "MJD+.5" to improve precision
    # Returns a list: year, month, day
    my($jd) = @_;		# ($jd, $juldat)

    my($year, $month, $day);	# return values
    my($julyr) = 365.25;
    my($daymnth) = 30.6001;
    my($jdp, $ijdp, $jdf);
    my($lpdays);		# 
    my($y100, $y400, $lpd100, $lpd400);
	my $julcdr = 0;
      
    $julyr = 365.25;
    $dymnth = 30.6001;
	
#     Separate fractional part of day from the Julian Date

    $jdp = $jd + 0.5;
    $ijdp = int($jdp);
    if ($jdp < 0 && $jdp != $ijdp) {$ijdp--;} # Another day if neg

    $jdf = $jdp - $ijdp;
	$ijdp += 2400000;

#     If Gregorian calendar, adjust for missing leap days

    if ($julcdr) {
	$lpdays = 0;
    } else {
	$y100 = ($ijdp - 1867216.25) / 36524.25;
	$lpd100 = int($y100);
	if ($y100 < 0 && $y100 != $lpd100) {$lpd100--;}

	$y400 = $lpd100 / 4;
	$lpd400 = int($y400);
	if ($y400 <0 && $y400 != $lpd400) {$lpd400--;}
	$lpdays = 1 + $lpd100 - $lpd400;
    }

#     Determine year (relative to year -4716)

    $tmp = $ijdp + 1524 + $lpdays;
    $dy = ($tmp - 122.1) / $julyr;
    if ($dy < 0) {$dy--;}
    $year = int($dy);

#     Determine month

    $dm = $julyr * $year;
    if ($dm < 0) {$dm -= 0.9;}
    $tmp -= int($dm);
    $month = int($tmp / $dymnth);

#     Determine day

    $day = $tmp - int($dymnth * $month) + $jdf;

#     'Internal' calendar starts in March so that leap days occur at end
#     of year; adjust calendar to start in January

    if ($month <= 13) {
	$month--;
    } else {
	$month -= 13;
    }
    if ($month >= 3) {
	$year -= 4716;
    } else {
	$year -= 4715;
    }
    return($year, $month, $day);
}

sub dmstod {

my $dms = pop(@_);
$hour = int($dms / 10000);
$dms -= $hour * 10000;
$min = int($dms / 100);
$sec = $dms - $min * 100;

return ($hour + $min / 60. + $sec/3600.);
}
